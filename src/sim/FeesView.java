/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sim;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author r36
 */
public class FeesView extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;

    public FeesView() {
        initComponents();

        updatePanel.setVisible(false);
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2,
                size.height / 2 - getHeight() / 2);
        displayTable();
        FEES_ID.setVisible(false);
        feesTable.setBackground(new Color(255, 255, 204));
        ((DefaultTableCellRenderer) feesTable.getDefaultRenderer(Object.class)).setBackground(new Color(0, 0, 0, 0));

        feesTable.setGridColor(Color.BLUE);
        feesTable.setForeground(Color.BLACK);
        jScrollPane1.setOpaque(false);
        feesTable.setOpaque(false);
        ((DefaultTableCellRenderer) feesTable.getDefaultRenderer(Object.class)).setOpaque(false);
        jScrollPane1.getViewport().setOpaque(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ST_ID = new javax.swing.JTextField();
        ST_NAME = new javax.swing.JTextField();
        REG_DATE = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        feesTable = new javax.swing.JTable();
        T_FEES = new javax.swing.JTextField();
        AMOUNT = new javax.swing.JTextField();
        DUE = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        AMOUNTtotal = new javax.swing.JTextField();
        Cur_DATE = new com.toedter.calendar.JDateChooser();
        search = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        FEES_ID = new javax.swing.JTextField();
        updatePanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        new_due = new javax.swing.JTextField();
        new_payment = new javax.swing.JTextField();
        new_Total_payment = new javax.swing.JTextField();
        newPaymentDate = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        btn_backHome = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Payment Date");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Student Name");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Total Fees");

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Registration Date");

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Total Paid");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Payment Amount");

        ST_ID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ST_ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ST_IDActionPerformed(evt);
            }
        });
        ST_ID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ST_IDKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ST_IDKeyTyped(evt);
            }
        });

        ST_NAME.setEditable(false);
        ST_NAME.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ST_NAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ST_NAMEActionPerformed(evt);
            }
        });

        REG_DATE.setEnabled(false);
        REG_DATE.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        feesTable.setBackground(new java.awt.Color(255, 255, 204));
        feesTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        feesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        feesTable.setGridColor(new java.awt.Color(255, 51, 51));
        feesTable.setRowHeight(28);
        feesTable.setSelectionBackground(new java.awt.Color(204, 255, 204));
        feesTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        feesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(feesTable);

        T_FEES.setEditable(false);
        T_FEES.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        T_FEES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                T_FEESActionPerformed(evt);
            }
        });

        AMOUNT.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        AMOUNT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AMOUNTActionPerformed(evt);
            }
        });
        AMOUNT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AMOUNTKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AMOUNTKeyTyped(evt);
            }
        });

        DUE.setEditable(false);
        DUE.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DUE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DUEActionPerformed(evt);
            }
        });
        DUE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DUEKeyTyped(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("SAVE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonReset.setBackground(new java.awt.Color(204, 255, 204));
        jButtonReset.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonReset.setText("RESET");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(204, 255, 204));
        jButtonDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonDelete.setText("DELETE");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonUpdate.setBackground(new java.awt.Color(204, 255, 204));
        jButtonUpdate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Payment Due");

        AMOUNTtotal.setEditable(false);
        AMOUNTtotal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        AMOUNTtotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AMOUNTtotalActionPerformed(evt);
            }
        });
        AMOUNTtotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                AMOUNTtotalKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AMOUNTtotalKeyTyped(evt);
            }
        });

        Cur_DATE.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchKeyTyped(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Search Student");

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Student Id");

        FEES_ID.setEditable(false);
        FEES_ID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        updatePanel.setBackground(new java.awt.Color(255, 255, 255));
        updatePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Update Amount");

        new_due.setEditable(false);
        new_due.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        new_due.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        new_payment.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        new_payment.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        new_payment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                new_paymentKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                new_paymentKeyTyped(evt);
            }
        });

        new_Total_payment.setEditable(false);
        new_Total_payment.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        new_Total_payment.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        new_Total_payment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                new_Total_paymentKeyReleased(evt);
            }
        });

        newPaymentDate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        javax.swing.GroupLayout updatePanelLayout = new javax.swing.GroupLayout(updatePanel);
        updatePanel.setLayout(updatePanelLayout);
        updatePanelLayout.setHorizontalGroup(
            updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newPaymentDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(new_due)
            .addComponent(new_Total_payment)
            .addComponent(new_payment)
            .addGroup(updatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
        );
        updatePanelLayout.setVerticalGroup(
            updatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updatePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(new_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(new_Total_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(new_due, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newPaymentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ST_NAME)
                            .addComponent(DUE)
                            .addComponent(AMOUNTtotal)
                            .addComponent(AMOUNT)
                            .addComponent(REG_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                            .addComponent(Cur_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(T_FEES)
                            .addComponent(ST_ID))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(FEES_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(169, 169, 169))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(FEES_ID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(77, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ST_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ST_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(REG_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(T_FEES, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AMOUNT, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(AMOUNTtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DUE, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Cur_DATE, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)))
                            .addComponent(updatePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(72, 72, 72))))
        );

        jPanel6.setBackground(new java.awt.Color(51, 51, 51));

        jLabel12.setBackground(new java.awt.Color(51, 51, 51));
        jLabel12.setFont(new java.awt.Font("Snap ITC", 1, 20)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 0, 51));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("M a n a g e   S t u d e n t    F e e s");
        jLabel12.setOpaque(true);

        btn_backHome.setBackground(new java.awt.Color(255, 255, 255));
        btn_backHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/navigateIMG/icons8_Rewind_64px.png"))); // NOI18N
        btn_backHome.setToolTipText("back to home page ");
        btn_backHome.setOpaque(true);
        btn_backHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_backHomeMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_backHomeMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                btn_backHomeMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(btn_backHome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 886, Short.MAX_VALUE)
                .addGap(34, 34, 34))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(btn_backHome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ST_IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ST_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ST_IDActionPerformed

    private void ST_NAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ST_NAMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ST_NAMEActionPerformed

    private void T_FEESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_T_FEESActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_T_FEESActionPerformed

    private void AMOUNTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AMOUNTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AMOUNTActionPerformed

    private void DUEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DUEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DUEActionPerformed

    public void loadSTdata() {
        int totalfees = 0;
        int payment = 0;
        int Totalpaid = 0;
        int duefees = 0;

        String stID = ST_ID.getText();
        String querry = "SELECT * FROM student_ms.students WHERE st_id=?";
        String querry1 = "SELECT * FROM student_ms.fees where st_id='" + stID + "'";
        Connection conn = null;
        PreparedStatement pst = null;
        PreparedStatement pst2 = null;
        ResultSet rs = null;
        ResultSet rs2 = null;
        try {
            conn = connectionDB.connection_DB();
            pst = conn.prepareStatement(querry);
            pst2 = conn.prepareStatement(querry1);
            pst.setString(1, stID);
            rs = pst.executeQuery();
            rs2 = pst2.executeQuery();
            if (rs.next()) {
                String Sname = rs.getString("first_name");
                ST_NAME.setText(Sname);
                String dateREG = rs.getString("reg_date");
                Date date = new SimpleDateFormat("yyy-MM-dd").parse(dateREG);
                REG_DATE.setDate(date);
                int feesDD = rs.getInt("fees");
                String feeValu = String.valueOf(feesDD);
                T_FEES.setText(feeValu);

            }
            while (rs2.next()) {
                Totalpaid = rs2.getInt("total_pay");
                duefees = rs2.getInt("payment_due");
                System.out.println(Totalpaid);
                String total = String.valueOf(Totalpaid);
                AMOUNTtotal.setText(total);
                String dueF = String.valueOf(duefees);
                DUE.setText(dueF);

            }

        } catch (Exception e) {
            e.printStackTrace();

        } finally {
            try {
                conn.close();
                pst.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(FeesView.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    public ArrayList<FeesSTD> FeesList() {

        ArrayList<FeesSTD> FeesList = new ArrayList<>();

        try {
            Connection con = connectionDB.connection_DB();
            String query1 = "SELECT * from fees ";
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query1);
            FeesSTD feesList;
            while (rs.next()) {

                feesList = new FeesSTD(rs.getInt("fees_id"), rs.getInt("st_id"), rs.getString("st_name"),
                        rs.getString("reg_date"), rs.getInt("total_fees"), rs.getInt("payment_amount"),
                        rs.getInt("total_pay"), rs.getInt("payment_due"), rs.getString("payment_Date")
                );
                FeesList.add(feesList);

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

        return FeesList;
    }

    public void SearchBystdid() {
        String stID = search.getText();
        Connection conn = connectionDB.connection_DB();
        PreparedStatement pst = null;
        ResultSet rs = null;
        try {

            conn = connectionDB.connection_DB();
            String sql = "SELECT * FROM fees  where st_id='" + stID + "'";

            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            feesTable.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {

            try {
                rs.close();
                pst.close();

            } catch (Exception e) {

            }
        }
    }

    public void show_FeesList() {
        ArrayList<FeesSTD> list = FeesList();
        DefaultTableModel model = (DefaultTableModel) feesTable.getModel();
        Object[] row = new Object[9];
        for (int i = 0; i < list.size(); i++) {
            Object object = row[i];
            row[0] = list.get(i).getFees_id();
            row[1] = list.get(i).getSt_id();
            row[2] = list.get(i).getSt_name();
            row[3] = list.get(i).getReg_date();
            row[4] = list.get(i).getTotal_fees();
            row[5] = list.get(i).getPayment_amount();
            row[6] = list.get(i).gettotal_pay();
            row[7] = list.get(i).getPayment_due();
            row[8] = list.get(i).getCurrent_date();

            model.addRow(row);
        }

    }

    public void displayTable() {
        String stID = ST_ID.getText();
        try {

            conn = connectionDB.connection_DB();
            String sql = "SELECT * FROM student_ms.fees";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            feesTable.setModel(net.proteanit.sql.DbUtils.resultSetToTableModel(rs));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        } finally {

            try {
                rs.close();
                pst.close();

            } catch (Exception e) {

            }
        }
    }
    private void ST_IDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ST_IDKeyReleased

        updatePanel.setVisible(false);
        AMOUNT.setEditable(true);
        AMOUNT.setEnabled(true);
        DUE.setEnabled(false);
        AMOUNTtotal.setEnabled(false);
        Cur_DATE.setEnabled(true);

        if (ST_ID.getText().isEmpty()) {
//            show_Score();
            clearfield();

        }
        loadSTdata();

    }//GEN-LAST:event_ST_IDKeyReleased
    public void insertUpdatefees(char operation, Integer fees_id, int st_id,
            String st_name, String reg_date, int total_fees,
            int payment_amount, int total_pay, int payment_due,
            String current_date) {

        Connection conn = connectionDB.connection_DB();
        PreparedStatement pst;
        //i for insert
        if (operation == 'i') {
            try {
                pst = conn.prepareStatement("insert into student_ms.fees(st_id, st_name, reg_date, total_fees, payment_amount,total_pay, payment_due, current_date) values(?,?,?,?,?,?,?,?)");
                pst.setInt(1, st_id);
                pst.setString(2, st_name);
                pst.setString(3, reg_date);
                pst.setInt(4, total_fees);
                pst.setInt(5, payment_amount);
                pst.setInt(6, total_pay);
                pst.setInt(7, payment_due);
                pst.setString(8, current_date);

                if (pst.executeUpdate() > 0) {

                    JOptionPane.showMessageDialog(null, "Data saved");
                }

            } catch (SQLException ex) {
                Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (operation == 'u') {
            try {
                pst = conn.prepareStatement("UPDATE student_ms.fees SET st_id= ?, st_name= ?,reg_date= ?, total_fees= ?, payment_amount= ?,total_pay= ?, payment_due= ?, current_date= ? WHERE fees_id = ?");
                pst.setInt(1, st_id);
                pst.setString(2, st_name);
                pst.setString(3, reg_date);
                pst.setInt(4, total_fees);
                pst.setInt(5, payment_amount);
                pst.setInt(6, total_pay);

                pst.setInt(7, payment_due);
                pst.setString(8, current_date);
                pst.setInt(9, fees_id);

                if (pst.executeUpdate() > 0) {

                    JOptionPane.showMessageDialog(null, "Data Updated");
                }

            } catch (SQLException ex) {
                Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (operation == 'd') {
            try {
                pst = conn.prepareStatement("DELETE FROM student_ms.fees WHERE fees_id=? ");
                pst.setInt(1, fees_id);

                if (pst.executeUpdate() > 0) {

                    JOptionPane.showMessageDialog(null, "Data Deleted");
                }

            } catch (SQLException ex) {
                Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    private void feesStatus() {

        try {
            int totalfees = 0;
            int payment = 0;
            int Totalpaid = 0;
            int duefees = 0;
            String stid = ST_ID.getText();
            int TOTALfees = Integer.parseInt(T_FEES.getText());
            String sql = "SELECT * FROM student_ms.fees where st_id='" + stid + "'";
            conn = connectionDB.connection_DB();
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                Totalpaid = rs.getInt("total_pay");
                System.out.println(Totalpaid);

            }
            try {
                payment = payment + Integer.parseInt(AMOUNT.getText());
                Totalpaid = Totalpaid + payment;
                String total = String.valueOf(Totalpaid);
                AMOUNTtotal.setText(total);
                duefees = (TOTALfees - Totalpaid);
                String dueamt = String.valueOf(duefees);
                DUE.setText(dueamt);
            } catch (Exception e) {
            }

        } catch (SQLException e) {
            e.getMessage();
        }

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
//            int F_Id=Integer.parseInt(FEES_ID.getText());
            int st_id = Integer.parseInt(ST_ID.getText());
            String STname = ST_NAME.getText();
            double feesR = Double.parseDouble(T_FEES.getText());
            double paymentR = Double.parseDouble(AMOUNT.getText());
            double dueFee = Double.parseDouble(DUE.getText());
            double tpaid =Double.parseDouble(AMOUNTtotal.getText());

//if (verify()) {
            DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            DateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
            String rgDate = sdf.format(REG_DATE.getDate());
            System.out.println(rgDate);

            String currDate = sdf2.format(Cur_DATE.getDate());
            System.out.println(currDate);
//                insertUpdatefees('i', null, st_id, STname, rgDate, feesR, paymentR, tpaid, dueFee, currDate);
            Connection conn = connectionDB.connection_DB();
            System.out.println("connected");
            PreparedStatement pst;

            pst = conn.prepareStatement("insert into student_ms.fees(st_id, st_name, reg_date, total_fees,"
                    + " payment_amount,total_pay, payment_due, payment_Date) values(?,?,?,?,?,?,?,?)");
            pst.setInt(1, st_id);
            pst.setString(2, STname);
            pst.setString(3, rgDate);
            pst.setDouble(4, feesR);
            pst.setDouble(5, paymentR);
            pst.setDouble(6, tpaid);
            pst.setDouble(7, dueFee);
            pst.setString(8, currDate);
//               int count=0;
//count=pst.executeUpdate("insert into student_ms.fees(st_id, st_name, reg_date, total_fees,"
//                        + " payment_amount,total_pay, payment_due, current_date) values('" + st_id +"','" + STname +"','" + rgDate +"','" + feesR +"','" + paymentR +"','" + tpaid +"','" + dueFee +"','" + currDate +"')");
            System.out.println("connected2");
            if (pst.executeUpdate() > 0) {

                JOptionPane.showMessageDialog(null, "Data saved");
            }

//        }
            DefaultTableModel model = (DefaultTableModel) feesTable.getModel();
            model.setRowCount(0);
            displayTable();
            clearfield();
        } catch (Exception e) {
            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, "one or more fields are empty ");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        clearfield();
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void btn_backHomeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backHomeMouseReleased
        btn_backHome.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btn_backHomeMouseReleased

    private void btn_backHomeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backHomeMousePressed
        btn_backHome.setBackground(new Color(139, 238, 178));
    }//GEN-LAST:event_btn_backHomeMousePressed

    private void btn_backHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_backHomeMouseClicked
        HomeWindow hw = new HomeWindow();
        this.dispose();
        hw.setVisible(true);
    }//GEN-LAST:event_btn_backHomeMouseClicked

    private void AMOUNTtotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AMOUNTtotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AMOUNTtotalActionPerformed

    private void AMOUNTtotalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AMOUNTtotalKeyReleased

    }//GEN-LAST:event_AMOUNTtotalKeyReleased

    private void AMOUNTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AMOUNTKeyReleased
        feesStatus();
        if (AMOUNT.getText().isEmpty()) {
            AMOUNTtotal.setText("");
            DUE.setText("");
            Cur_DATE.setCalendar(null);
        }
    }//GEN-LAST:event_AMOUNTKeyReleased

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        int confrm = JOptionPane.showConfirmDialog(null, "Are you sure to Update ?", "Update", JOptionPane.YES_NO_OPTION);
        if (confrm == 0) {
//            feesStatus();
            try {
                int F_Id = Integer.parseInt(FEES_ID.getText());
                int st_id = Integer.parseInt(ST_ID.getText());
                String STname = ST_NAME.getText();
                double feesR = Double.parseDouble(T_FEES.getText());
                double paymentR = Double.parseDouble(AMOUNT.getText());
                double paymentNew =Double.parseDouble(new_payment.getText());
                double dueFee =Double.parseDouble(DUE.getText());
                double new_dueFee =Double.parseDouble(new_due.getText());
                double tpaid =Double.parseDouble(AMOUNTtotal.getText());
                double new_Total_pment =Double.parseDouble(new_Total_payment.getText());

//if (verify()) {
                DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                DateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd");
                DateFormat sdf3 = new SimpleDateFormat("yyyy-MM-dd");
                String rgDate = sdf.format(REG_DATE.getDate());
                System.out.println(rgDate);

                String currDate = sdf2.format(Cur_DATE.getDate());
                String paymantDateNew = sdf3.format(newPaymentDate.getDate());
                //"insert into student_ms.fees(st_id, st_name, reg_date, total_fees, payment_amount,total_pay, payment_due, payment_Date

//                if (verify2()) {
                String querrySC = "UPDATE student_ms.fees set st_id ='" + st_id + "', st_name ='" + STname + "',"
                        + " reg_date ='" + rgDate + "', total_fees ='" + feesR + "', payment_amount ='" + paymentNew + "',"
                        + " total_pay ='" + new_Total_pment + "', payment_due ='" + new_dueFee + "', "
                        + "payment_Date ='" + paymantDateNew + "' WHERE fees_id='" + F_Id + "'  ";
                Connection con = connectionDB.connection_DB();
                PreparedStatement pst = con.prepareStatement(querrySC);
//                pst.executeUpdate();
                if (pst.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(null, "Data Updated");
                    updatePanel.setVisible(false);
                }

                DefaultTableModel model = (DefaultTableModel) feesTable.getModel();
                model.setRowCount(0);
                displayTable();
                clearfield();

//                }
            } catch (Exception e) {
                e.getMessage();
                JOptionPane.showMessageDialog(null, "Select row from table to Update data");
//                e.printStackTrace();
                updatePanel.setVisible(true);
            }

        } else {

        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void feesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_feesTableMouseClicked

        updatePanel.setVisible(true);
        AMOUNT.setEditable(false);
        AMOUNT.setEnabled(false);
        DUE.setEnabled(false);
        AMOUNTtotal.setEnabled(false);
        Cur_DATE.setEnabled(false);

//         FeesViewUpdate fv= new FeesViewUpdate();
//      fv.setVisible(true);
        int i = feesTable.getSelectedRow();
        TableModel model = feesTable.getModel();

        FEES_ID.setText(model.getValueAt(i, 0).toString());
        ST_ID.setText(model.getValueAt(i, 1).toString());

        ST_NAME.setText(model.getValueAt(i, 2).toString());
        T_FEES.setText(model.getValueAt(i, 4).toString());
        AMOUNT.setText(model.getValueAt(i, 5).toString());
        AMOUNTtotal.setText(model.getValueAt(i, 6).toString());
        DUE.setText(model.getValueAt(i, 7).toString());

        String totalPaymentOld = model.getValueAt(i, 6).toString();
        Emp emp = new Emp();
        emp.totalpayment_old = totalPaymentOld;

        try {
            Date date2;
            date2 = new SimpleDateFormat("yyyy-MM-dd").parse((String) model.getValueAt(i, 3));
            REG_DATE.setDate(date2);
            Date date1;
            date1 = new SimpleDateFormat("yyyy-MM-dd").parse((String) model.getValueAt(i, 8));
            Cur_DATE.setDate(date1);
        } catch (ParseException ex) {
            Logger.getLogger(FeesView.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_feesTableMouseClicked

    private void ST_IDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ST_IDKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_ST_IDKeyTyped

    private void AMOUNTKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AMOUNTKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_AMOUNTKeyTyped

    private void AMOUNTtotalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AMOUNTtotalKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_AMOUNTtotalKeyTyped

    private void DUEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DUEKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_DUEKeyTyped

    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        SearchBystdid();
        if (search.getText().isEmpty()) {
            show_FeesList();
            clearfield();

        }
    }//GEN-LAST:event_searchKeyReleased

    private void searchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_searchKeyTyped

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int confrm = JOptionPane.showConfirmDialog(null, "Are you sure to delete ?", "Delete", JOptionPane.YES_NO_OPTION);
        if (confrm == 0) {
            try {
                Connection con = connectionDB.connection_DB();
                int row = feesTable.getSelectedRow();
                String value = (feesTable.getModel().getValueAt(row, 0).toString());
                String querry4 = "DELETE FROM fees WHERE fees_id=" + value;
                PreparedStatement pst = con.prepareStatement(querry4);
                pst.executeUpdate();
                DefaultTableModel model = (DefaultTableModel) feesTable.getModel();

                model.setRowCount(0);

                JOptionPane.showMessageDialog(null, "Data Deleted Successfully");
                show_FeesList();

                //                   hw.cs.setText(Integer.toString(MyFunction.countData("student")));
                clearfield();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Select one to Delete data");
                System.out.println(e.getMessage());
            }

        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        HomeWindow hw = new HomeWindow();
        this.dispose();
        hw.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    private void new_paymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_new_paymentKeyReleased
        try {
            double oldTotal = 00;
            double new_Total = 00;
            double oldpmnt = 00;
            double postTotal = 00;
            double newpmn = 00;
            double totalfees = 00;
            double newdue = 00;
            totalfees = Double.parseDouble(T_FEES.getText());
            oldTotal = Double.parseDouble(AMOUNTtotal.getText());
            oldpmnt = Double.parseDouble(AMOUNT.getText());
            newpmn = Double.parseDouble(new_payment.getText());
            postTotal = oldTotal - oldpmnt;
            new_Total = postTotal + newpmn;
            newdue = totalfees - new_Total;
            new_Total_payment.setText(String.valueOf(new_Total));
            new_due.setText(String.valueOf(newdue));
            new_Total_payment.setText(String.valueOf(new_Total));
        } catch (NumberFormatException e) {
            e.getMessage();
        }

        if (new_payment.getText().isEmpty()) {
            new_Total_payment.setText("");
            new_due.setText("");
            newPaymentDate.setCalendar(null);
        } else {

        }


    }//GEN-LAST:event_new_paymentKeyReleased

    private void new_Total_paymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_new_Total_paymentKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_new_Total_paymentKeyReleased

    private void new_paymentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_new_paymentKeyTyped
            if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_new_paymentKeyTyped

    public void clearfield() {

        FEES_ID.setText("");
        ST_ID.setText("");
        ST_NAME.setText("");
        T_FEES.setText("");
        AMOUNT.setText("");
        DUE.setText("");
        AMOUNTtotal.setText("");
        REG_DATE.setCalendar(null);
        Cur_DATE.setCalendar(null);
        new_payment.setText("");
        new_Total_payment.setText("");
        new_due.setText("");
        newPaymentDate.setCalendar(null);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FeesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FeesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FeesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FeesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FeesView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AMOUNT;
    private javax.swing.JTextField AMOUNTtotal;
    private com.toedter.calendar.JDateChooser Cur_DATE;
    private javax.swing.JTextField DUE;
    private javax.swing.JTextField FEES_ID;
    private com.toedter.calendar.JDateChooser REG_DATE;
    private javax.swing.JTextField ST_ID;
    private javax.swing.JTextField ST_NAME;
    private javax.swing.JTextField T_FEES;
    private javax.swing.JLabel btn_backHome;
    private javax.swing.JTable feesTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser newPaymentDate;
    private javax.swing.JTextField new_Total_payment;
    private javax.swing.JTextField new_due;
    private javax.swing.JTextField new_payment;
    private javax.swing.JTextField search;
    private javax.swing.JPanel updatePanel;
    // End of variables declaration//GEN-END:variables
}
