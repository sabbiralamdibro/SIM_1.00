/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sim;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author SAM
 */
public class AddModule extends javax.swing.JFrame {

    DefaultListModel model = new DefaultListModel();
//    DbUtils db= new DbUtils();
String id="";
    public AddModule() {
        initComponents();
      loadJlistLABEL(MODULE_LIST);
//       db.retrivebatch();
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2,
                size.height / 2 - getHeight() / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        MODULE_LIST = new javax.swing.JList<>();
        jLabel32 = new javax.swing.JLabel();
        btnSHOW = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnADD = new javax.swing.JButton();
        btnDELETE = new javax.swing.JButton();
        NewModule = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ADD NEW BATCH");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        MODULE_LIST.setBackground(new java.awt.Color(153, 255, 255));
        MODULE_LIST.setBorder(new javax.swing.border.MatteBorder(null));
        MODULE_LIST.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        MODULE_LIST.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MODULE_LISTMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(MODULE_LIST);

        jLabel32.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 0, 51));
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setText("Batch Name");

        btnSHOW.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSHOW.setText("SHOW ALL");
        btnSHOW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSHOWActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnADD.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnADD.setText("ADD");
        btnADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnADDActionPerformed(evt);
            }
        });

        btnDELETE.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDELETE.setText("DELETE");
        btnDELETE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDELETEActionPerformed(evt);
            }
        });

        NewModule.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btnClear.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NewModule, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSHOW, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnADD, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(NewModule, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnADD, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(btnDELETE, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(btnSHOW, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnADDActionPerformed
        if (ADD(NewModule.getText())) {
            JOptionPane.showMessageDialog(null, "New Module Added");
           NewModule.setText("");
           loadJlistLABEL(MODULE_LIST);
        }else{
        
         JOptionPane.showMessageDialog(null, "Module Not Added");
        }
        
        
        
    }//GEN-LAST:event_btnADDActionPerformed

    private void btnSHOWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSHOWActionPerformed
    loadJlistLABEL(MODULE_LIST);
    }//GEN-LAST:event_btnSHOWActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
      if (updateDATA(id,NewModule.getText())) {
            JOptionPane.showMessageDialog(null, "Module Updated");
           NewModule.setText("");
           loadJlistLABEL(MODULE_LIST);
        }else{
        
         JOptionPane.showMessageDialog(null, "Update Failed");
        }
       
        
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void MODULE_LISTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MODULE_LISTMouseClicked
       
        id=MODULE_LIST.getSelectedValue().toString();
        NewModule.setText(id);
        
        
        
    }//GEN-LAST:event_MODULE_LISTMouseClicked

    private void btnDELETEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDELETEActionPerformed
         if (delete(id)) {
            JOptionPane.showMessageDialog(null, "Module Deleted");
           NewModule.setText("");
          loadJlistLABEL(MODULE_LIST);
        }else{
        
         JOptionPane.showMessageDialog(null, "Not Deleted");
        }
    }//GEN-LAST:event_btnDELETEActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
       MODULE_LIST.setModel(new DefaultListModel());
        NewModule.setText("");
        
    }//GEN-LAST:event_btnClearActionPerformed
    public void loadComboLABEL(JComboBox combo) {

        Connection conn = null;
        ResultSet rs = null;
        CallableStatement cst = null;

        try {
            conn = connectionDB.connection_DB();

            cst = conn.prepareCall("{CALL listlabel()}");
            cst.execute();
            rs = cst.getResultSet();
            List labelList = new ArrayList();

            while (rs.next()) {
                labelList.add(rs.getString(1));

            }

            combo.setModel(new DefaultComboBoxModel(labelList.toArray()));
            combo.insertItemAt("--Select One--", 0);
            combo.setSelectedIndex(0);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                conn.close();
                cst.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddModule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> MODULE_LIST;
    private javax.swing.JTextField NewModule;
    private javax.swing.JButton btnADD;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDELETE;
    private javax.swing.JButton btnSHOW;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void loadJlistLABEL(JList listM) {

        Connection conn = null;
        ResultSet rs = null;
        CallableStatement cst = null;

        try {
            conn = connectionDB.connection_DB();

            cst = conn.prepareCall("{CALL listBatchName()}");
            cst.execute();
            rs = cst.getResultSet();
            List labelList = new ArrayList();

            while (rs.next()) {
                labelList.add(rs.getString(1));

            }

            listM.setModel(new DefaultComboBoxModel(labelList.toArray()));

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                conn.close();
                cst.close();
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    public boolean ADD(String module) {

        Connection conn = null;

        Statement s = null;
        String sql = "INSERT INTO batchlist(batch) VALUES('" + module + "')";
        try {
            conn = connectionDB.connection_DB();

            s = conn.prepareStatement(sql);
            s.execute(sql);
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            try {
                conn.close();
                s.close();

            } catch (SQLException ex) {
                Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }
    private void retrivedata(){
    DefaultListModel model =new DbUtils().retriveModel();
    MODULE_LIST.setModel(model);
    
    }

    public boolean updateDATA(String id, String value) {
        String sql = "UPDATE batchlist set batch='" + value + "' where batch='" + id + "'";
        String sql2 ="UPDATE course set batch_name='" + value + "' where id='" + id + "'";
        Connection conn = null;

        Statement s = null;
        Statement s2 = null;

        try {
            conn = connectionDB.connection_DB();

            s = conn.prepareStatement(sql);
            s2 = conn.prepareStatement(sql2);
            s.execute(sql);
            s2.execute(sql2);
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            try {
                conn.close();
                s.close();
                s2.close();
                

            } catch (SQLException ex) {
                Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
            }

           
        }

    }
    
   public boolean delete(String id) { 
    String sql= "DELETE FROM batchlist WHERE batch='"+id+"'"   ; 
           Connection conn = null;

        Statement s = null;

        try {
            conn = connectionDB.connection_DB();

            s = conn.prepareStatement(sql);
            s.execute(sql);
            return true;

        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            try {
                conn.close();
                s.close();

            } catch (SQLException ex) {
                Logger.getLogger(student.class.getName()).log(Level.SEVERE, null, ex);
            }

           
        }
   
   
 
   }
    
    

}
